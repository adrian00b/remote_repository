git init - stworzenie repozytorium

git status - aktualny status repozytorium

git add - dodanie pliku do przechowalni : 
	git add . - dodanie wszystkich plikow
	git add nazwapliku - dodanie konkretnego pliku 
	
git commit - zapisanie zmian w repozytorium  :
	git commit -m "Komentarz:  - zapisanie zmian w repozytorium wraz z komentarzem 
	
git clean - sluzy do usuniecia plikow ktore nigdy nie zostaly dodane do repozozytorium (niesledzone pliki i katalogi), 
	UWAGA! zmiany nie da sie odwrocic
	git clean -n   - zwraca liste plikow ktore moga zostac usuniete
	git clean -nd  - tutaj pokaze sie kompletna lista - wraz z katalogami 
	git clean -idf - (i) interaktywnie, (d) katalogi, jezeli chcemy usunac tylko wybrane
	
git reset - usuniecie z przechowywalni (cofniecie plikow ze stage), odwrotnosc polecenia git add   
	 
git checkout - usuniecie zmian z plikow bedacych w przechowali

git rm nazwapliku - usuniecie pliku z repozytorium (i katalogu roboczego rowniez),
 roznica miedzy git rm a git clean polega na tym ze uzywajac git rm zmiany da sie odwrocic!! odwrocic checkoutem
 
git log - pokazuje historie zmian wraz z logami, aby wyjsc z historii zmian klawisz Q
	git log --oneline - pokazuje historie zmian w skroconej formie zapisu 
	--author "" - pokazuje commity stworzonego przez danego autora
	--grep "" - pokazuje commity zawierajace w komentarzu podana fraze
	-4 - pokazuje liczbe commitow, w tym przypadku 4
	- "sciezka" - pokazuje historie danego pliku (podawane na koncu, po parametrach)
	--patch - pokazuje zmiany dokonane w pliku
	--stat - pokazuje statystyki zmian
	-summary - tez pewne podsumowanie zmian
	--graph - pokazuje zmiany razem z roznymi branchami (pokazuje rozgalezienia)
	
git shortlog - historia z podzialem na uzytkownikow (uproszczone w oneline od razu)
	
git checkout 'log' - przywraca stan z wybranego commita, jednakze otwiera to w stanie 'HEAD detached', czyli mozna dowolnie
	wprowadzac zmiany w plikach bez zapisywania tego gdziekolwiek - pozniej mozemy zapisac zmiany w osobnym branchu:
	
	git checkout 'log' 'file' - przywraca stan wybranego pliku 'file' z danego commita
	git checkout -b - zapisanie w nowym branchu
	git checkout master - powrot do glownego brancha (najabrdziej aktualnej wersji spred git checkout 'log')
	git checkout 'branch_name' - przelaczenie sie na wybrany branch
	
git revert 'log' - odwrocenie zmian z wybranego commitu i zapisanie ich jako nowy commit, NIE USUWA HISTORII!!

git reset 'log' - przywraca wybrany commit - UWAGA! modyfikuje historie 
	
	git reset 'log' --hard - przywraca stan z danego commita usuwajac dokonane po nim zmiany i commity
		oznacza to ze usuwa wszystkie commity z historii i nie bedzie sie dalo do nich wrocic
		
	git reset 'log' --mixed - usuwa historie commitow ale w katalogu roboczym pozostawia zmiany,
		ktore mozna dodac add i pozniej scommitowac, albo odrzucic checkout .
	
	git reset 'log' --soft - analogicznie jak mixed tylko zmiany sa juz w przechowalni add - wystarczy scommitowac albo odrzucic


-- help  - dopisane do jakiegokolwiek polecenia otwiera nam dokumentacje dotyczaca jego parametrow etc

git branch 'name' - utworzenie nowego brancha
	git branch  - pokazuje wszystkie istniejace branche
	git branch -D 'name' - usuniecie nieptorzebnego branchu

git merge 'name' - laczenie zmian z dwoch branchy, musimy byc na branchu ktory jest bardziej pdostawowy 
	np. jezeli na branch master chcemy dodac zmiany z brancha dev to musimy przelaczyc sie na branch master
	poleceniem git checkout master i tam dokonac zmergowania	

git stash - UWAGA! jezeli dzialamy na roznych branchach, mozemy przed commitem chciec sie przelaczyc na inny branch
	sytuacja taka moze spowodowac, ze zmiany zostana nadpisane przy przelaczaniu i znikna bo nie dalismy commita
	w tej sytuacji mozemy uzyc polecenia git stash, ktory dodaje zmiany na stos, do poczekalni, na pozniej 
	
	git stash pop - po wykonaniu git stash mozemy przelaczyc sie na inny branch i tam zaladowac zmiany dokonane
		na wczesniejszym branchy ale nie scommitowane - w ten sposob wczytamy tamte zmiany, mimo iz w branchu 
		np. dev tego nie ma 
		
	


